{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u00b6 PhiFormat \u57fa\u672c\u6982\u5ff5 PhiFormat \u89c4\u8303\u6587\u6863","title":"\u9996\u9875"},{"location":"#_1","text":"PhiFormat \u57fa\u672c\u6982\u5ff5 PhiFormat \u89c4\u8303\u6587\u6863","title":"\u9996\u9875"},{"location":"basic-concepts/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 \u65f6\u95f4\u5355\u4f4d\uff1atick \u00b6 \u4e00\u8a00\u853d\u4e4b \u6bcf\u4e00\u62cd\uff08beat\uff09\u5747\u53ef\u5206\u4e3a 480 ticks\u3002 \u57fa\u51c6\u5750\u6807\u7cfb \u00b6 \u4e00\u8a00\u853d\u4e4b \u6a2a\u5c4f\u65f6\uff0c\u4ee5\u5c4f\u5e55\u4e2d\u592e\u4e3a\u539f\u70b9\uff0c\u6a2a\u5411\u4e3a X \u8f74\uff0c\u7eb5\u5411\u4e3a Y \u8f74\uff0c\u5355\u4f4d\u957f\u5ea6\u4e3a\u534a\u4e2a\u6a2a\u5411\u957f\u5ea6\uff0c\u5efa\u7acb\u8d77\u7684\u5750\u6807\u7cfb\uff0c\u79f0\u4e4b\u4e3a\u57fa\u672c\u5750\u6807\u7cfb\u3002 TBD \u00b6","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"basic-concepts/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"basic-concepts/#tick","text":"\u4e00\u8a00\u853d\u4e4b \u6bcf\u4e00\u62cd\uff08beat\uff09\u5747\u53ef\u5206\u4e3a 480 ticks\u3002","title":"\u65f6\u95f4\u5355\u4f4d\uff1atick"},{"location":"basic-concepts/#_2","text":"\u4e00\u8a00\u853d\u4e4b \u6a2a\u5c4f\u65f6\uff0c\u4ee5\u5c4f\u5e55\u4e2d\u592e\u4e3a\u539f\u70b9\uff0c\u6a2a\u5411\u4e3a X \u8f74\uff0c\u7eb5\u5411\u4e3a Y \u8f74\uff0c\u5355\u4f4d\u957f\u5ea6\u4e3a\u534a\u4e2a\u6a2a\u5411\u957f\u5ea6\uff0c\u5efa\u7acb\u8d77\u7684\u5750\u6807\u7cfb\uff0c\u79f0\u4e4b\u4e3a\u57fa\u672c\u5750\u6807\u7cfb\u3002","title":"\u57fa\u51c6\u5750\u6807\u7cfb"},{"location":"basic-concepts/#tbd","text":"","title":"TBD"},{"location":"spec/","text":"\u89c4\u8303\u6587\u6863 \u00b6 PhiFormat \u603b\u4f53\u4e00\u89c8 \u00b6 (object) -> $schema (string) timing (object) -> offset (number) bpmList (array) -> (object) -> id (integer) time (integer) bpm (number) judgeLineList (array) -> (object) -> id (integer) eventList (array) -> (object) -> id (integer) type (string) // Or integer? Need further discussion. startTime (integer) endTime (integer) properties (object) -> (...) noteList (array) -> (object) -> id (integer) type (integer) // This can be integer since notes have only 4 types. startTime (integer) endTime (integer) relativeX (number) side (integer) // Should be 1 or -1. speed (number, optional) isFake (bool) holdTime (number, optional) \u6570\u636e\u7ed3\u6784 \u00b6 TypeScript \u00b6 export interface BpmData { id : number ; time : number ; bpm : number ; } export interface TimingData { offset : number ; bpmList : BpmData []; } type Ease = 'linear' | 'backIn' | 'backOut' | 'bounceIn' | 'bounceOut' | 'circIn' | 'circOut' | 'cubicIn' | 'cubicOut' | 'elasticIn' | 'elasticOut' | 'expoIn' | 'expoOut' | 'quadIn' | 'quadOut' | 'quartIn' | 'quartOut' | 'quintIn' | 'quintOut' | 'sineIn' | 'sineOut' ; interface BaseEventData { id : number ; type : string ; startTime : number ; endTime : number ; properties : {}; } interface MoveEventData extends BaseEventData { type : 'move' ; properties : { x : number ; y : number ; easeX : Ease ; easeY : Ease ; }; } interface RotateEventData extends BaseEventData { type : 'rotate' ; properties : { angle : number ; ease : Ease ; }; } interface FadeEventData extends BaseEventData { type : 'fade' ; properties : { alpha : number ; ease : Ease ; }; } interface SpeedEventData extends BaseEventData { type : 'speed' ; properties : { speed : number ; ease : Ease ; }; } export type EventData = MoveEventData | RotateEventData | FadeEventData | SpeedEventData ; interface BaseNoteData { id : number ; type : string ; startTime : number ; endTime : number ; relativeX : number ; side : 1 | - 1 ; speed? : number ; isFake : boolean ; } interface ClickNoteData extends BaseNoteData { type : 'click' ; } interface FlickNoteData extends BaseNoteData { type : 'flick' ; } interface DragNoteData extends BaseNoteData { type : 'drag' ; } interface HoldNoteData extends BaseNoteData { type : 'hold' ; holdTime : number ; } export type NoteData = ClickNoteData | FlickNoteData | DragNoteData | HoldNoteData ; export interface JudgeLineData { id : number ; eventList : EventData []; noteList : NoteData []; } export interface ChartData { timing : TimingData ; judgeLineList : JudgeLineData []; }","title":"\u89c4\u8303\u6587\u6863"},{"location":"spec/#_1","text":"","title":"\u89c4\u8303\u6587\u6863"},{"location":"spec/#phiformat","text":"(object) -> $schema (string) timing (object) -> offset (number) bpmList (array) -> (object) -> id (integer) time (integer) bpm (number) judgeLineList (array) -> (object) -> id (integer) eventList (array) -> (object) -> id (integer) type (string) // Or integer? Need further discussion. startTime (integer) endTime (integer) properties (object) -> (...) noteList (array) -> (object) -> id (integer) type (integer) // This can be integer since notes have only 4 types. startTime (integer) endTime (integer) relativeX (number) side (integer) // Should be 1 or -1. speed (number, optional) isFake (bool) holdTime (number, optional)","title":"PhiFormat \u603b\u4f53\u4e00\u89c8"},{"location":"spec/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"spec/#typescript","text":"export interface BpmData { id : number ; time : number ; bpm : number ; } export interface TimingData { offset : number ; bpmList : BpmData []; } type Ease = 'linear' | 'backIn' | 'backOut' | 'bounceIn' | 'bounceOut' | 'circIn' | 'circOut' | 'cubicIn' | 'cubicOut' | 'elasticIn' | 'elasticOut' | 'expoIn' | 'expoOut' | 'quadIn' | 'quadOut' | 'quartIn' | 'quartOut' | 'quintIn' | 'quintOut' | 'sineIn' | 'sineOut' ; interface BaseEventData { id : number ; type : string ; startTime : number ; endTime : number ; properties : {}; } interface MoveEventData extends BaseEventData { type : 'move' ; properties : { x : number ; y : number ; easeX : Ease ; easeY : Ease ; }; } interface RotateEventData extends BaseEventData { type : 'rotate' ; properties : { angle : number ; ease : Ease ; }; } interface FadeEventData extends BaseEventData { type : 'fade' ; properties : { alpha : number ; ease : Ease ; }; } interface SpeedEventData extends BaseEventData { type : 'speed' ; properties : { speed : number ; ease : Ease ; }; } export type EventData = MoveEventData | RotateEventData | FadeEventData | SpeedEventData ; interface BaseNoteData { id : number ; type : string ; startTime : number ; endTime : number ; relativeX : number ; side : 1 | - 1 ; speed? : number ; isFake : boolean ; } interface ClickNoteData extends BaseNoteData { type : 'click' ; } interface FlickNoteData extends BaseNoteData { type : 'flick' ; } interface DragNoteData extends BaseNoteData { type : 'drag' ; } interface HoldNoteData extends BaseNoteData { type : 'hold' ; holdTime : number ; } export type NoteData = ClickNoteData | FlickNoteData | DragNoteData | HoldNoteData ; export interface JudgeLineData { id : number ; eventList : EventData []; noteList : NoteData []; } export interface ChartData { timing : TimingData ; judgeLineList : JudgeLineData []; }","title":"TypeScript"}]}