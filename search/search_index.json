{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u00b6 \u57fa\u672c\u6982\u5ff5 \u89c4\u8303\u6587\u6863","title":"\u9996\u9875"},{"location":"#_1","text":"\u57fa\u672c\u6982\u5ff5 \u89c4\u8303\u6587\u6863","title":"\u9996\u9875"},{"location":"basic-concepts/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 \u65f6\u95f4\u5355\u4f4d \u00b6 \u5ef6\u8fdf\u503c\uff08Offset\uff09 \u00b6 TBD \u8282\u62cd\uff08Beat\uff09 \u00b6 \u8282\u62cd \u662f\uff08\u51e0\u4e4e\uff1f\uff09\u6240\u6709\u97f3\u4e50\u5171\u540c\u5177\u6709\u7684\u6982\u5ff5\u3002\u91cf\u5316\u6bcf\u5206\u949f\u7684\u8282\u62cd\u6570\u7684\u6570\u503c\u88ab\u79f0\u4f5c BPM (Beat Per Minute)\u3002 PhiFormat \u8bbe\u8ba1\u4e0a\u652f\u6301\u591a BPM \u7684\u97f3\u4e50\u3002 Tick\uff1aPhiFormat \u57fa\u672c\u65f6\u95f4\u5355\u4f4d \u00b6 Tick \u662f PhiFormat \u4e2d\u57fa\u672c\u7684\u65f6\u95f4\u5355\u4f4d\u3002 Bug \u6b64\u5757\u5185\u5bb9\u9700\u8981\u63a5\u53d7\u590d\u6838\u3002 \u5728 PhiFormat \u4e2d\uff0cTick \u4e3a\u6574\u6570\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\u30020 tick \u88ab\u89c6\u4e3a\u66f2\u76ee\u7684\u8d77\u59cb\uff080 second\uff09\u3002\u6bcf\u4e00\u62cd\u88ab\u5212\u5206\u4e3a 72 \u4e2a Tick\u3002\u4f8b\u5982\uff0c tick 72 \u610f\u5473\u7b2c 2 \u62cd\u7684\u5f00\u59cb\u3002 \u4e3a\u4ec0\u4e48\u6bcf\u4e00\u62cd\u88ab\u5212\u5206\u4e3a 72 \u4e2a tick\uff1f \u5f88\u7b80\u5355\uff1a 8*9=72 \u3002 \u5c06\u4e00\u4e2a\u62cd\u6570\u4ee5 3 \u548c 4 \u7684\u500d\u6570\u8fdb\u884c\u5212\u5206\uff0c\u5c06\u4f1a\u5e26\u7ed9\u8c31\u9762\u521b\u4f5c\u8005\u6781\u5927\u7684\u4fbf\u5229\u3002\u4e3a\u4e86\u6ee1\u8db3\u53ef\u80fd\u7684\u9700\u6c42\uff0c\u6211\u4eec\u5c06\u5b83\u5212\u5206\u4e3a 8 \u548c 9 \u7684\u500d\u6570\u3002\u8fd9\u5e94\u8be5\u80fd\u6ee1\u8db3\u7edd\u5927\u591a\u6570\u7684\u8c31\u9762\u521b\u4f5c\u8005\u7684\u9700\u6c42\u3002 \u6211\u4eec \u5f3a\u70c8\u4e0d\u63a8\u8350 \u5c06\u97f3\u7b26\u653e\u7f6e\u5728\u6bd4 1/72 \u66f4\u4e3a\u7ec6\u81f4\u7684\u4f4d\u7f6e\uff1a\u8fd9\u6837\u505a\u53ea\u4f1a\u4e3a\u73a9\u5bb6\u5e26\u6765\u7cdf\u7cd5\u7684\u4f53\u9a8c\u3002\u5982\u679c\u786e\u5b9e\u6709\u9700\u8981\uff0c\u8bf7\u8003\u8651\u5bf9 BPM \u8fdb\u884c\u500d\u6570\u64cd\u4f5c\u3002 \u57fa\u51c6\u5750\u6807\u7cfb \u00b6 TBD \u00b6","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"basic-concepts/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"basic-concepts/#_2","text":"","title":"\u65f6\u95f4\u5355\u4f4d"},{"location":"basic-concepts/#offset","text":"TBD","title":"\u5ef6\u8fdf\u503c\uff08Offset\uff09"},{"location":"basic-concepts/#beat","text":"\u8282\u62cd \u662f\uff08\u51e0\u4e4e\uff1f\uff09\u6240\u6709\u97f3\u4e50\u5171\u540c\u5177\u6709\u7684\u6982\u5ff5\u3002\u91cf\u5316\u6bcf\u5206\u949f\u7684\u8282\u62cd\u6570\u7684\u6570\u503c\u88ab\u79f0\u4f5c BPM (Beat Per Minute)\u3002 PhiFormat \u8bbe\u8ba1\u4e0a\u652f\u6301\u591a BPM \u7684\u97f3\u4e50\u3002","title":"\u8282\u62cd\uff08Beat\uff09"},{"location":"basic-concepts/#tickphiformat","text":"Tick \u662f PhiFormat \u4e2d\u57fa\u672c\u7684\u65f6\u95f4\u5355\u4f4d\u3002 Bug \u6b64\u5757\u5185\u5bb9\u9700\u8981\u63a5\u53d7\u590d\u6838\u3002 \u5728 PhiFormat \u4e2d\uff0cTick \u4e3a\u6574\u6570\u503c\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\u30020 tick \u88ab\u89c6\u4e3a\u66f2\u76ee\u7684\u8d77\u59cb\uff080 second\uff09\u3002\u6bcf\u4e00\u62cd\u88ab\u5212\u5206\u4e3a 72 \u4e2a Tick\u3002\u4f8b\u5982\uff0c tick 72 \u610f\u5473\u7b2c 2 \u62cd\u7684\u5f00\u59cb\u3002 \u4e3a\u4ec0\u4e48\u6bcf\u4e00\u62cd\u88ab\u5212\u5206\u4e3a 72 \u4e2a tick\uff1f \u5f88\u7b80\u5355\uff1a 8*9=72 \u3002 \u5c06\u4e00\u4e2a\u62cd\u6570\u4ee5 3 \u548c 4 \u7684\u500d\u6570\u8fdb\u884c\u5212\u5206\uff0c\u5c06\u4f1a\u5e26\u7ed9\u8c31\u9762\u521b\u4f5c\u8005\u6781\u5927\u7684\u4fbf\u5229\u3002\u4e3a\u4e86\u6ee1\u8db3\u53ef\u80fd\u7684\u9700\u6c42\uff0c\u6211\u4eec\u5c06\u5b83\u5212\u5206\u4e3a 8 \u548c 9 \u7684\u500d\u6570\u3002\u8fd9\u5e94\u8be5\u80fd\u6ee1\u8db3\u7edd\u5927\u591a\u6570\u7684\u8c31\u9762\u521b\u4f5c\u8005\u7684\u9700\u6c42\u3002 \u6211\u4eec \u5f3a\u70c8\u4e0d\u63a8\u8350 \u5c06\u97f3\u7b26\u653e\u7f6e\u5728\u6bd4 1/72 \u66f4\u4e3a\u7ec6\u81f4\u7684\u4f4d\u7f6e\uff1a\u8fd9\u6837\u505a\u53ea\u4f1a\u4e3a\u73a9\u5bb6\u5e26\u6765\u7cdf\u7cd5\u7684\u4f53\u9a8c\u3002\u5982\u679c\u786e\u5b9e\u6709\u9700\u8981\uff0c\u8bf7\u8003\u8651\u5bf9 BPM \u8fdb\u884c\u500d\u6570\u64cd\u4f5c\u3002","title":"Tick\uff1aPhiFormat \u57fa\u672c\u65f6\u95f4\u5355\u4f4d"},{"location":"basic-concepts/#_3","text":"","title":"\u57fa\u51c6\u5750\u6807\u7cfb"},{"location":"basic-concepts/#tbd","text":"","title":"TBD"},{"location":"spec/","text":"\u89c4\u8303\u6587\u6863 \u00b6 PhiFormat \u603b\u4f53\u4e00\u89c8 \u00b6 (object) -> $schema (string) timing (object) -> offset (number) bpmList (array) -> // Should not be empty. (object) -> id (integer) time (integer) bpm (number) judgeLineList (array) -> (object) -> id (integer) eventList (array) -> (object) -> id (integer) type (string) // move, rotate, fade, speed or construct. startTime (integer) endTime (integer) properties (object) -> (...) noteList (array) -> (object) -> id (integer) type (string) // click, flick, drag or hold. startTime (integer) endTime (integer) showTime (integer) // Defaults to 0. relativeX (number) side (integer) // Should be 1 or -1. speed (number) // Defaults to 1. isFake (bool) // Defaults to false. \u6570\u636e\u7ed3\u6784 \u00b6 TypeScript \u00b6 export interface BpmData { id : number ; time : number ; bpm : number ; } export interface TimingData { offset : number ; bpmList : BpmData []; } export type Ease = 'linear' | 'backIn' | 'backOut' | 'bounceIn' | 'bounceOut' | 'circIn' | 'circOut' | 'cubicIn' | 'cubicOut' | 'elasticIn' | 'elasticOut' | 'expoIn' | 'expoOut' | 'quadIn' | 'quadOut' | 'quartIn' | 'quartOut' | 'quintIn' | 'quintOut' | 'sineIn' | 'sineOut' ; export interface BaseEventData { id : number ; type : string ; startTime : number ; endTime : number ; properties : Record < string , any > ; } export interface ConstructEventData extends BaseEventData { type : 'construct' ; properties : { x : number ; y : number ; angle : number ; alpha : number ; speed : number ; }; } export interface MoveEventData extends BaseEventData { type : 'move' ; properties : { x : number ; y : number ; easeX : Ease ; easeY : Ease ; }; } export interface RotateEventData extends BaseEventData { type : 'rotate' ; properties : { angle : number ; ease : Ease ; }; } export interface FadeEventData extends BaseEventData { type : 'fade' ; properties : { alpha : number ; ease : Ease ; }; } export interface SpeedEventData extends BaseEventData { type : 'speed' ; properties : { speed : number ; ease : Ease ; }; } export type EventData = ConstructEventData | MoveEventData | RotateEventData | FadeEventData | SpeedEventData ; export interface BaseNoteData { id : number ; type : string ; startTime : number ; endTime : number ; showTime : number ; relativeX : number ; side : 1 | - 1 ; speed : number ; isFake : boolean ; } export interface ClickNoteData extends BaseNoteData { type : 'click' ; } export interface FlickNoteData extends BaseNoteData { type : 'flick' ; } export interface DragNoteData extends BaseNoteData { type : 'drag' ; } export interface HoldNoteData extends BaseNoteData { type : 'hold' ; } export type NoteData = ClickNoteData | FlickNoteData | DragNoteData | HoldNoteData ; export interface JudgeLineData { id : number ; eventList : EventData []; noteList : NoteData []; } export interface ChartData { timing : TimingData ; judgeLineList : JudgeLineData []; }","title":"\u89c4\u8303\u6587\u6863"},{"location":"spec/#_1","text":"","title":"\u89c4\u8303\u6587\u6863"},{"location":"spec/#phiformat","text":"(object) -> $schema (string) timing (object) -> offset (number) bpmList (array) -> // Should not be empty. (object) -> id (integer) time (integer) bpm (number) judgeLineList (array) -> (object) -> id (integer) eventList (array) -> (object) -> id (integer) type (string) // move, rotate, fade, speed or construct. startTime (integer) endTime (integer) properties (object) -> (...) noteList (array) -> (object) -> id (integer) type (string) // click, flick, drag or hold. startTime (integer) endTime (integer) showTime (integer) // Defaults to 0. relativeX (number) side (integer) // Should be 1 or -1. speed (number) // Defaults to 1. isFake (bool) // Defaults to false.","title":"PhiFormat \u603b\u4f53\u4e00\u89c8"},{"location":"spec/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"spec/#typescript","text":"export interface BpmData { id : number ; time : number ; bpm : number ; } export interface TimingData { offset : number ; bpmList : BpmData []; } export type Ease = 'linear' | 'backIn' | 'backOut' | 'bounceIn' | 'bounceOut' | 'circIn' | 'circOut' | 'cubicIn' | 'cubicOut' | 'elasticIn' | 'elasticOut' | 'expoIn' | 'expoOut' | 'quadIn' | 'quadOut' | 'quartIn' | 'quartOut' | 'quintIn' | 'quintOut' | 'sineIn' | 'sineOut' ; export interface BaseEventData { id : number ; type : string ; startTime : number ; endTime : number ; properties : Record < string , any > ; } export interface ConstructEventData extends BaseEventData { type : 'construct' ; properties : { x : number ; y : number ; angle : number ; alpha : number ; speed : number ; }; } export interface MoveEventData extends BaseEventData { type : 'move' ; properties : { x : number ; y : number ; easeX : Ease ; easeY : Ease ; }; } export interface RotateEventData extends BaseEventData { type : 'rotate' ; properties : { angle : number ; ease : Ease ; }; } export interface FadeEventData extends BaseEventData { type : 'fade' ; properties : { alpha : number ; ease : Ease ; }; } export interface SpeedEventData extends BaseEventData { type : 'speed' ; properties : { speed : number ; ease : Ease ; }; } export type EventData = ConstructEventData | MoveEventData | RotateEventData | FadeEventData | SpeedEventData ; export interface BaseNoteData { id : number ; type : string ; startTime : number ; endTime : number ; showTime : number ; relativeX : number ; side : 1 | - 1 ; speed : number ; isFake : boolean ; } export interface ClickNoteData extends BaseNoteData { type : 'click' ; } export interface FlickNoteData extends BaseNoteData { type : 'flick' ; } export interface DragNoteData extends BaseNoteData { type : 'drag' ; } export interface HoldNoteData extends BaseNoteData { type : 'hold' ; } export type NoteData = ClickNoteData | FlickNoteData | DragNoteData | HoldNoteData ; export interface JudgeLineData { id : number ; eventList : EventData []; noteList : NoteData []; } export interface ChartData { timing : TimingData ; judgeLineList : JudgeLineData []; }","title":"TypeScript"}]}